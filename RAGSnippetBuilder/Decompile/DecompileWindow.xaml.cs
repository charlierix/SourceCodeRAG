//using ICSharpCode.Decompiler;
using ICSharpCode.Decompiler.Metadata;
using ICSharpCode.Decompiler.Solution;
using System;
using System.CodeDom.Compiler;
using System.IO;
using System.IO.Pipes;
using System.Printing;
using System.Reflection.Metadata;
using System.Reflection.PortableExecutable;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows;

namespace RAGSnippetBuilder.Decompile
{
    // https://github.com/icsharpcode/ILSpy/tree/master
    public partial class DecompileWindow : Window
    {
        #region Constructor

        public DecompileWindow()
        {
            InitializeComponent();

            Background = SystemColors.ControlBrush;
        }

        #endregion

        #region Event Listeners

        private void Decompile_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (txtSourceFolder.Text == "")
                {
                    MessageBox.Show("Please select a source folder", Title, MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                else if (!Directory.Exists(txtSourceFolder.Text))
                {
                    MessageBox.Show("Source folder doesn't exist", Title, MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                if (txtOutputFolder.Text == "")
                {
                    MessageBox.Show("Please select an output folder", Title, MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                else if (!Directory.Exists(txtOutputFolder.Text))
                {
                    MessageBox.Show("Output folder doesn't exist", Title, MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                string source_folder = txtSourceFolder.Text;
                string output_folder = txtOutputFolder.Text;
                bool remove_ilspy_errormsgs = chkRemoveILSpyErrorComments.IsChecked.Value;

                var decompile_settings = new ICSharpCode.Decompiler.DecompilerSettings()
                {
                    ThrowOnAssemblyResolveErrors = false,
                };



                // TODO: log


                foreach (var filename in GetDLLNames(source_folder))
                {
                    string dll_sourcefolder = System.IO.Path.GetDirectoryName(filename.filename);

                    // Create an output folder based on the dll name
                    string project_folder = GetOutputProjectFolder(filename.filename, source_folder, output_folder, filename.extra_folder);

                    Directory.CreateDirectory(project_folder);

                    // This is a unit test for WholeProjectDecompiler.  Gives good hints about how to use it
                    // https://github.com/icsharpcode/ILSpy/blob/180428a1ff630538d6c2bd19340405210b7e2ec6/ICSharpCode.Decompiler.Tests/RoundtripAssembly.cs#L291

                    using (var fileStream = new FileStream(filename.filename, FileMode.Open, FileAccess.Read))
                    {
                        // TODO: target framework defaults to 4.8 if null passed in.  My want to create a 4.8 output folder and a netcore output folder, decompile twice, keep the one with fewer errors
                        //var resolver = new UniversalAssemblyResolver(filename, false, null);

                        PEFile module = new PEFile(filename.filename, fileStream, PEStreamOptions.PrefetchEntireImage);
                        var resolver = new UniversalAssemblyResolver(filename.filename, false, module.Metadata.DetectTargetFrameworkId(), null, PEStreamOptions.PrefetchMetadata, MetadataReaderOptions.ApplyWindowsRuntimeProjections);

                        //var assemblyNames = new DirectoryInfo(dll_sourcefolder).EnumerateFiles("*.dll").Select(f => Path.GetFileNameWithoutExtension(f.Name));
                        //foreach (var name in assemblyNames)
                        //    localAssemblies.Add(name);

                        //var resolver = new ICSharpCode.Decompiler.Tests.TestAssemblyResolver();       // private

                        resolver.AddSearchDirectory(dll_sourcefolder);
                        resolver.RemoveSearchDirectory(".");

                        var decompiler = new ICSharpCode.Decompiler.CSharp.ProjectDecompiler.WholeProjectDecompiler(decompile_settings, resolver, null, resolver, null);
                        decompiler.DecompileProject(module, project_folder);


                        // ILSpy generates a lot of error messages if there are broken references, so remove them if the user wants
                        if (remove_ilspy_errormsgs)
                            RemoveILSpyErrorMsgs(project_folder);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), Title, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        // These are attempts to figure out why some decompiled projects have odd strings in them.  Those strings seem to
        // be machine generated keys, so there's no good way to convert back to english words
        //
        // Possible approach: Scan the entire project getting a distinct list of the values, then turn them into name_0000, name_0001...
        // Replace with those easier to read names
        //
        // Task an agent to come up with reasonable names based on context clues in the code where they are used (can't do in a single
        // shot, would need to do in small pieces, replacing names as the process goes
        private void UnescapeStrings_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string sample = @"_200D_206E_206C_200E_206F_206B_206F_200E_206B_200C_200C_202E_202E_202B_202B_200B_206E_202D_202A_206E_206F_202A_202B_206A_206D_202C_202B_202A_206C_206C_206D_206F_206D_206B_200F_202B_200D_206E_206A_206B_202E(";

                StringBuilder sixteens = new StringBuilder();
                StringBuilder eightsA = new StringBuilder();
                StringBuilder eightsB = new StringBuilder();

                foreach (Match match in Regex.Matches(sample, @"_(?<left>[A-F0-9]{2})(?<right>[A-F0-9]{2})"))
                {
                    string four = match.Groups["left"].Value + match.Groups["right"].Value;
                    string two = "00" + match.Groups["right"].Value;

                    char char16 = Convert.ToChar(Convert.ToUInt32(four, 16));
                    //char char8 = Convert.ToChar(Convert.ToUInt32(match.Groups["right"].Value, 8));       // fails
                    char char8 = Convert.ToChar(Convert.ToUInt32(two, 16));

                    sixteens.Append(char16);
                    eightsA.Append(char8);



                    byte[] temp1 = Convert.FromHexString(four);
                    byte[] temp2 = Convert.FromHexString(two);

                    char[] temp3 = Encoding.ASCII.GetChars([temp2[1]]);

                    eightsB.Append(temp3);

                }

                string final16 = sixteens.ToString();
                string final8A = eightsA.ToString();
                string final8B = eightsA.ToString();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), Title, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
        private void GetRightTwoChars_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                #region values

                string values =
@"Search ""_20[A-F0-9]{2}"" (5311 hits in 1 file of 1 searched) [RegEx]
  new 1 (5311 hits)
	Line   13: 	private sealed class _200C_202A_200F_206B_200D_202D_200F_200B_206A_206C_200C_200F_206F_206A_206F_206B_206D_206B_202D_202D_206F_206B_206F_202C_200C_202D_206D_202B_200D_202E_200B_206A_202C_206F_206A_202C_206A_202D_206D_202E
	Line   15: 		public Vector3 _200D_200E_200E_202A_200E_206A_202B_206E_200D_202D_200F_206C_202C_202D_206B_200B_202C_206A_200B_202C_206F_202D_206A_200C_202D_200C_200D_202D_206F_202A_206F_202D_200E_200E_200D_206D_206B_202D_202A_200D_202E;
	Line   17: 		public Quaternion _200B_206E_202D_206C_206D_200C_200D_202C_206C_200F_206E_200E_206F_202A_202B_206F_200D_202C_200E_206F_202D_202D_206A_206B_200E_202B_200E_200D_200B_202B_200B_202B_200D_202E_206C_200B_202E_202A_206E_200F_202E;
	Line   19: 		internal void _206B_202D_200D_206F_206C_206D_200F_206E_202D_206F_200F_206B_202A_200D_200D_206F_202D_202C_200E_206A_200C_206C_206E_200C_202B_202C_202B_206E_202B_200E_206B_206C_206C_202C_202D_206C_202A_202A_200E_202A_202E(Item P_0)
	Line   36: 						_200D_206E_206C_200E_206F_206B_206F_200E_206B_200C_200C_202E_202E_202B_202B_200B_206E_202D_202A_206E_206F_202A_202B_206A_206D_202C_202B_202A_206C_206C_206D_206F_206D_206B_200F_202B_200D_206E_206A_206B_202E(_206B_200E_200D_202D_200D_206E_202A_202A_200F_200D_206B_200D_202D_202B_206C_200D_202C_200C_200F_200F_202B_202D_202B_206B_202A_206B_206C_202E_206D_200F_206C_202C_206B_200D_206E_206F_202D_206B_206A_206B_202E((ThunderBehaviour)(object)P_0), _200D_200E_200E_202A_200E_206A_202B_206E_200D_202D_200F_206C_202C_202D_206B_200B_202C_206A_200B_202C_206F_202D_206A_200C_202D_200C_200D_202D_206F_202A_206F_202D_200E_200E_200D_206D_206B_202D_202A_200D_202E);
	Line   37: 						_206E_206E_200B_206B_200B_206B_206A_206D_202A_202E_200D_200E_202B_206C_200D_206F_206D_206B_206D_206A_202E_206C_202D_206D_200E_202D_202E_202E_202B_206F_202D_200C_202C_202A_202C_202D_200C_206D_202C_202A_202E(_206B_200E_200D_202D_200D_206E_202A_202A_200F_200D_206B_200D_202D_202B_206C_200D_202C_200C_200F_200F_202B_202D_202B_206B_202A_206B_206C_202E_206D_200F_206C_202C_206B_200D_206E_206F_202D_206B_206A_206B_202E((ThunderBehaviour)(object)P_0), _200B_206E_202D_206C_206D_200C_200D_202C_206C_200F_206E_200E_206F_202A_202B_206F_200D_202C_200E_206F_202D_202D_206A_206B_200E_202B_200E_200D_200B_202B_200B_202B_200D_202E_206C_200B_202E_202A_206E_200F_202E);
	Line   51: 		static Transform _206B_200E_200D_202D_200D_206E_202A_202A_200F_200D_206B_200D_202D_202B_206C_200D_202C_200C_200F_200F_202B_202D_202B_206B_202A_206B_206C_202E_206D_200F_206C_202C_206B_200D_206E_206F_202D_206B_206A_206B_202E(ThunderBehaviour P_0)
	Line   56: 		static void _200D_206E_206C_200E_206F_206B_206F_200E_206B_200C_200C_202E_202E_202B_202B_200B_206E_202D_202A_206E_206F_202A_202B_206A_206D_202C_202B_202A_206C_206C_206D_206F_206D_206B_200F_202B_200D_206E_206A_206B_202E(Transform P_0, Vector3 P_1)
	Line   62: 		static void _206E_206E_200B_206B_200B_206B_206A_206D_202A_202E_200D_200E_202B_206C_200D_206F_206D_206B_206D_206A_202E_206C_202D_206D_200E_202D_202E_202E_202B_206F_202D_200C_202C_202A_202C_202D_200C_206D_202C_202A_202E(Transform P_0, Quaternion P_1)
	Line   71: 	private sealed class _202A_202C_200F_200B_206B_202A_206F_206C_206D_206C_200C_206B_202C_202A_206A_206E_202C_202A_200C_206A_202B_200E_202E_200F_202A_202C_206D_200E_202A_202D_206D_206A_200B_202E_202E_202A_200F_202B_206D_202E
	Line   73: 		public static readonly _202A_202C_200F_200B_206B_202A_206F_206C_206D_206C_200C_206B_202C_202A_206A_206E_202C_202A_200C_206A_202B_200E_202E_200F_202A_202C_206D_200E_202A_202D_206D_206A_200B_202E_202E_202A_200F_202B_206D_202E _003C_003E9 = new _202A_202C_200F_200B_206B_202A_206F_206C_206D_206C_200C_206B_202C_202A_206A_206E_202C_202A_200C_206A_202B_200E_202E_200F_202A_202C_206D_200E_202A_202D_206D_206A_200B_202E_202E_202A_200F_202B_206D_202E();
	Line   81: 		internal bool _206F_200E_202A_202C_202E_200B_202B_206C_206C_200E_202A_206B_200E_200E_200B_206A_200E_200C_200B_206E_202B_206B_200D_202E_202B_206F_206C_200D_200B_206D_202E_200C_206B_200C_206D_202B_200F_200B_206E_206B_202E(string P_0)
	Line  115: 		internal bool _206A_202D_206E_202A_200E_202B_206D_206D_200B_202D_202D_206A_200E_200C_206D_206C_206B_206E_202A_206C_200E_200C_200F_206D_202C_200B_206A_202D_206E_202A_200C_202A_200D_200E_200E_202E_200F_202D_206F_206C_202E(string P_0)
	Line  169: 						num5 = (_206B_202C_202D_202D_206A_206F_200D_202B_202B_200E_206D_202C_202D_206C_206F_202B_200E_202A_202D_202C_202A_200F_202A_202B_200E_200D_200C_200B_202E_206E_206D_200D_202B_202D_206B_206F_202B_206F_200C_206C_202E(P_0, global::_003CModule_003E._200D_206A_200B_202E_202C_202C_200F_206D_202E_206A_206F_200B_202B_202B_200D_206B_200B_206C_206C_200C_200D_200F_202C_200E_200C_200B_200D_202C_202E_206C_206E_202B_200D_202C_206B_200E_200D_202E_200C_202E_202E<string>(1940667524)) ? 1 : 0);
	Line  206: 		internal bool _200F_202E_206C_206E_202E_206D_206A_200F_206A_206A_202C_202B_206C_206C_200B_202A_202E_206C_206E_200E_206F_206C_202E_206F_202B_206C_200B_206C_206D_200B_202E_200D_202A_200D_206E_206B_200B_200B_206A_200D_202E(string P_0)
	Line  235: 		static bool _206B_202C_202D_202D_206A_206F_200D_202B_202B_200E_206D_202C_202D_206C_206F_202B_200E_202A_202D_202C_202A_200F_202A_202B_200E_200D_200C_200B_202E_206E_206D_200D_202B_202D_206B_206F_202B_206F_200C_206C_202E(string P_0, string P_1)
	Line  242: 	public static string lootType = global::_003CModule_003E._200D_206A_200B_202E_202C_202C_200F_206D_202E_206A_206F_200B_202B_202B_200D_206B_200B_206C_206C_200C_200D_200F_202C_200E_200C_200B_200D_202C_202E_206C_206E_202B_200D_202C_206B_200E_200D_202E_200C_202E_202E<string>(-1009065379);
	Line  260: 	private List<string> _202B_200D_206B_202D_206C_206C_206A_206F_202E_206D_202B_206C_202C_206A_202E_202E_200F_200F_200F_200E_206D_206C_202E_200E_202A_206D_200E_202E_202B_206A_200C_206B_200E_202E_200D_202C_202A_200E_202C_206A_202E = new List<string>();
	Line  288: 					array[num5] = _206D_206A_206F_200B_202E_206D_202E_200D_206F_206C_200C_200C_200E_206C_200D_200B_200B_200E_206A_206D_206F_200C_206B_206A_206D_206D_200D_206B_206D_206E_200D_206C_206A_202A_202E_206E_206B_202B_200E_202E_202E(_206B_200B_206C_200E_200D_202D_200B_206A_200B_202A_200D_200E_202E_200E_206D_200F_202E_202A_202C_202E_206A_200E_202A_206F_206E_202A_200B_202C_202A_202D_202B_202C_202E_200F_206E_200F_200D_206F_206E_206F_202E(num6.ToString(global::_003CModule_003E._202D_202E_206B_206B_200C_206F_202A_200E_206C_206D_206F_206A_202D_200F_206E_200E_200C_202D_202B_200C_206F_206B_200C_200F_202D_200F_202E_206E_200E_200F_200F_202C_200B_200F_206B_202C_206D_202D_200E_200C_202E<string>(634525272)), global::_003CModule_003E._200D_206A_200B_202E_202C_202C_200F_206D_202E_206A_206F_200B_202B_202B_200D_206B_200B_206C_206C_200C_200D_200F_202C_200E_200C_200B_200D_202C_202E_206C_206E_202B_200D_202C_206B_200E_200D_202E_200C_202E_202E<string>(-43758467)), num6);
	Line  369: 					_206C_202D_206B_202B_202B_206A_202B_200E_200E_200F_206B_200D_202E_202E_202A_202C_206B_202D_206D_206A_202B_200C_202D_200D_202E_200B_200F_200E_202C_202C_206C_200F_206B_200F_206F_200D_200D_206B_206D_206D_202E(new BreakStartDelegate(EventManager_OnItemBrokenStart));
	Line  373: 					_206D_202D_206C_200D_206B_200E_206D_206F_202A_202B_200D_202E_202C_202E_206C_206C_202B_202E_200D_206F_200B_200F_200B_200F_200D_206F_202B_200B_202C_200E_202D_200E_200C_202E_200C_200F_202D_206C_206D_202A_202E(modData);
	Line  380: 					_200F_206E_206F_200B_206F_200D_202D_202A_200D_202B_202D_206B_206D_206A_200E_202E_202E_200E_206A_200E_202E_200B_206A_200C_200C_202A_200D_202E_206D_200F_202A_206E_206A_200F_206E_200B_200B_202B_206D_200C_202E((object)global::_003CModule_003E._202E_202E_200D_200B_206E_202E_200B_200F_202A_202E_206C_206C_202C_200E_200C_206F_206B_206E_200F_202D_200B_200D_206A_200E_206B_200C_200E_202C_206F_202E_206A_200C_202B_206A_206B_202E_200F_202C_200E_206B_202E<string>(342861976));
	Line  387: 					_202C_200F_206B_202D_206F_202E_206F_206B_206D_200E_202E_200F_202E_200F_206A_200E_202E_202C_200E_202C_206A_202E_202B_202B_202C_206E_202C_202B_202B_206F_202A_202A_202A_206E_202C_202C_206A_206E_202C_206C_202E(new ModLoadEvent(ModManager_OnModLoad));
	Line  391: 					_200F_206D_206B_202B_200E_200B_202A_200C_202E_206C_206E_206C_200E_200D_206F_202E_206E_200B_206F_206C_200E_200D_200E_202E_200D_202D_200D_202C_202B_202A_202E_202B_206D_202D_202A_206B_200B_202B_202C_202E(new BreakStartDelegate(EventManager_OnItemBrokenStart));
	Line  395: 					_206D_200E_206B_206D_206A_202D_206B_200E_200F_200F_200E_200B_200D_206D_206E_202D_206D_200F_200B_206E_200D_202D_206B_206C_202B_202B_206E_200C_202E_202D_206E_206B_206E_200E_206D_200F_200F_200C_206C_200C_202E(new CreatureKillEvent(EventManager_onCreatureKill));
	Line  396: 					_202C_200E_202A_200E_200E_206E_202E_202C_202E_200C_202A_200B_200E_206C_206D_200D_206D_206C_206C_200B_206F_200B_202A_206B_200D_202E_200D_202D_206C_202A_206D_206D_200C_202E_202E_206A_202A_202E_206E_206E_202E(new CreatureKillEvent(EventManager_onCreatureKill));
	Line  441: 					SummonLoot(_206A_202C_202A_206C_202B_202C_200D_202E_202B_202D_200C_200D_202E_206D_206F_206B_206D_206D_200D_206B_202C_202A_202E_206F_206F_202D_200E_206A_202A_206F_200C_202E_202B_206B_200B_206D_200F_200B_200E_206C_202E(_200C_202D_206E_202B_200E_202A_206A_202A_200F_202A_202D_202B_206E_206A_206A_200D_200B_202B_202A_200E_202D_206E_200C_200C_206F_200E_206A_200B_206B_200E_206A_206C_206F_200C_206F_206E_206A_206B_200E_202E((ThunderBehaviour)(object)breakable)), Quaternion.identity);
	Line  442: 					SummonLoot(_206A_202C_202A_206C_202B_202C_200D_202E_202B_202D_200C_200D_202E_206D_206F_206B_206D_206D_200D_206B_202C_202A_202E_206F_206F_202D_200E_206A_202A_206F_200C_202E_202B_206B_200B_206D_200F_200B_200E_206C_202E(_200C_202D_206E_202B_200E_202A_206A_202A_200F_202A_202D_202B_206E_206A_206A_200D_200B_202B_202A_200E_202D_206E_200C_200C_206F_200E_206A_200B_206B_200E_206A_206C_206F_200C_206F_206E_206A_206B_200E_202E((ThunderBehaviour)(object)breakable)), Quaternion.identity);
	Line  454: 					num8 = _202B_200E_206F_202B_202C_202B_206F_206B_200D_206D_202B_202A_200B_202A_206C_206C_206A_206E_202E_200B_202E_206E_206A_202C_206B_202D_202A_202B_206B_200D_200C_202E_200B_200F_202C_202D_206A_202A_200F_202D_202E(0, 100);
	Line  455: 					num9 = _202B_200E_206F_202B_202C_202B_206F_206B_200D_206D_202B_202A_200B_202A_206C_206C_206A_206E_202E_200B_202E_206E_206A_202C_206B_202D_202A_202B_206B_200D_200C_202E_200B_200F_202C_202D_206A_202A_200F_202D_202E(0, 100);
	Line  482: 					if (!_206B_206A_200F_202C_202D_200E_206D_200C_206E_202E_202E_206E_206E_202A_200D_202B_200B_202D_200F_202E_200D_202A_202A_206B_202B_202A_206F_202E_202D_206A_202C_206C_202D_200C_206B_206A_202E_206A_206F_202C_202E(lootMethod, global::_003CModule_003E._202D_206E_202E_202C_200B_200E_202B_200C_206D_202B_200E_206A_202E_206D_202C_200E_200D_200F_206D_200F_206E_202D_202A_202C_202A_206A_206A_200C_200E_206E_200B_206D_200F_202D_202B_206A_202C_206A_206D_202A_202E<string>(-1394322709)))
	Line  509: 					if (!_206B_206A_200F_202C_202D_200E_206D_200C_206E_202E_202E_206E_206E_202A_200D_202B_200B_202D_200F_202E_200D_202A_202A_206B_202B_202A_206F_202E_202D_206A_202C_206C_202D_200C_206B_206A_202E_206A_206F_202C_202E(lootMethod, global::_003CModule_003E._200D_206A_200B_202E_202C_202C_200F_206D_202E_206A_206F_200B_202B_202B_200D_206B_200B_206C_206C_200C_200D_200F_202C_200E_200C_200B_200D_202C_202E_206C_206E_202B_200D_202C_206B_200E_200D_202E_200C_202E_202E<string>(-526411923)))
	Line  519: 					SummonLoot(_206A_202C_202A_206C_202B_202C_200D_202E_202B_202D_200C_200D_202E_206D_206F_206B_206D_206D_200D_206B_202C_202A_202E_206F_206F_202D_200E_206A_202A_206F_200C_202E_202B_206B_200B_206D_200F_200B_200E_206C_202E(_200C_202D_206E_202B_200E_202A_206A_202A_200F_202A_202D_202B_206E_206A_206A_200D_200B_202B_202A_200E_202D_206E_200C_200C_206F_200E_206A_200B_206B_200E_206A_206C_206F_200C_206F_206E_206A_206B_200E_202E((ThunderBehaviour)(object)breakable)), Quaternion.identity);
	Line  520: 					SummonLoot(_206A_202C_202A_206C_202B_202C_200D_202E_202B_202D_200C_200D_202E_206D_206F_206B_206D_206D_200D_206B_202C_202A_202E_206F_206F_202D_200E_206A_202A_206F_200C_202E_202B_206B_200B_206D_200F_200B_200E_206C_202E(_200C_202D_206E_202B_200E_202A_206A_202A_200F_202A_202D_202B_206E_206A_206A_200D_200B_202B_202A_200E_202D_206E_200C_200C_206F_200E_206A_200B_206B_200E_206A_206C_206F_200C_206F_206E_206A_206B_200E_202E((ThunderBehaviour)(object)breakable)), Quaternion.identity);
	Line  524: 					SummonLoot(_206A_202C_202A_206C_202B_202C_200D_202E_202B_202D_200C_200D_202E_206D_206F_206B_206D_206D_200D_206B_202C_202A_202E_206F_206F_202D_200E_206A_202A_206F_200C_202E_202B_206B_200B_206D_200F_200B_200E_206C_202E(_200C_202D_206E_202B_200E_202A_206A_202A_200F_202A_202D_202B_206E_206A_206A_200D_200B_202B_202A_200E_202D_206E_200C_200C_206F_200E_206A_200B_206B_200E_206A_206C_206F_200C_206F_206E_206A_206B_200E_202E((ThunderBehaviour)(object)breakable)), Quaternion.identity);
	Line  548: 					SummonLoot(_206A_202C_202A_206C_202B_202C_200D_202E_202B_202D_200C_200D_202E_206D_206F_206B_206D_206D_200D_206B_202C_202A_202E_206F_206F_202D_200E_206A_202A_206F_200C_202E_202B_206B_200B_206D_200F_200B_200E_206C_202E(_200C_202D_206E_202B_200E_202A_206A_202A_200F_202A_202D_202B_206E_206A_206A_200D_200B_202B_202A_200E_202D_206E_200C_200C_206F_200E_206A_200B_206B_200E_206A_206C_206F_200C_206F_206E_206A_206B_200E_202E((ThunderBehaviour)(object)breakable)), Quaternion.identity);
	Line  589: 		_202B_200D_206B_202D_206C_206C_206A_206F_202E_206D_202B_206C_202C_206A_202E_202E_200F_200F_200F_200E_206D_206C_202E_200E_202A_206D_200E_202E_202B_206A_200C_206B_200E_202E_200D_202C_202A_200E_202C_206A_202E = _206A_200F_200D_200F_206F_206E_200E_206C_202A_202B_206B_206D_200B_200D_202C_202A_202A_202A_200F_206E_206B_206A_206A_200B_200E_200F_206C_206A_206B_202B_206F_202E_200F_206B_202D_202C_206D_202C_200C_200D_202E((Category)6);
	Line  617: 					SummonLoot(_206A_202C_202A_206C_202B_202C_200D_202E_202B_202D_200C_200D_202E_206D_206F_206B_206D_206D_200D_206B_202C_202A_202E_206F_206F_202D_200E_206A_202A_206F_200C_202E_202B_206B_200B_206D_200F_200B_200E_206C_202E(_200C_202D_206E_202B_200E_202A_206A_202A_200F_202A_202D_202B_206E_206A_206A_200D_200B_202B_202A_200E_202D_206E_200C_200C_206F_200E_206A_200B_206B_200E_206A_206C_206F_200C_206F_206E_206A_206B_200E_202E((ThunderBehaviour)(object)_206A_202C_200F_202E_200C_206D_206F_202E_206A_200E_202C_206E_202E_206C_202C_200B_206C_200E_206A_200C_200B_202C_206E_206E_200B_206E_206E_202D_200F_200F_206D_200F_200D_200B_206A_200F_200C_200E_202C_200F_202E(creature.ragdoll, (Type)4))), Quaternion.identity);
	Line  638: 					num14 = _202B_200E_206F_202B_202C_202B_206F_206B_200D_206D_202B_202A_200B_202A_206C_206C_206A_206E_202E_200B_202E_206E_206A_202C_206B_202D_202A_202B_206B_200D_200C_202E_200B_200F_202C_202D_206A_202A_200F_202D_202E(0, 100);
	Line  705: 					flag2 = _200D_200C_206F_206D_200E_206B_206B_202C_206E_206F_200D_200C_202E_206B_206F_200F_202D_206A_206F_202E_206B_206F_200D_206F_202C_202B_206C_200E_202A_206C_202E_206C_206F_202E_202E_206B_200D_200C_200C_202C_202E((Object)(object)creature, (Object)null);
	Line  712: 					_206E_202E_206B_202E_202C_202D_202E_202D_206C_202E_200F_200C_200D_202C_200F_202C_206C_206B_200C_206E_206E_202C_200E_200E_202D_202C_206F_200E_206F_206A_206F_200F_206F_206F_206B_202D_202D_200E_206A_202B_202E((ThunderEntity)(object)creature);
	Line  728: 					num5 = (_206B_206A_200F_202C_202D_200E_206D_200C_206E_202E_202E_206E_206E_202A_200D_202B_200B_202D_200F_202E_200D_202A_202A_206B_202B_202A_206F_202E_202D_206A_202C_206C_202D_200C_206B_206A_202E_206A_206F_202C_202E(lootMethod, global::_003CModule_003E._202D_206E_202E_202C_200B_200E_202B_200C_206D_202B_200E_206A_202E_206D_202C_200E_200D_200F_206D_200F_206E_202D_202A_202C_202A_206A_206A_200C_200E_206E_200B_206D_200F_202D_202B_206A_202C_206A_206D_202A_202E<string>(-1394322709)) ? 1 : 0);
	Line  748: 					if (_206B_206A_200F_202C_202D_200E_206D_200C_206E_202E_202E_206E_206E_202A_200D_202B_200B_202D_200F_202E_200D_202A_202A_206B_202B_202A_206F_202E_202D_206A_202C_206C_202D_200C_206B_206A_202E_206A_206F_202C_202E(lootMethod, global::_003CModule_003E._202E_202E_200D_200B_206E_202E_200B_200F_202A_202E_206C_206C_202C_200E_200C_206F_206B_206E_200F_202D_200B_200D_206A_200E_206B_200C_200E_202C_206F_202E_206A_200C_202B_206A_206B_202E_200F_202C_200E_206B_202E<string>(1239772566)))
	Line  817: 					_200E_200F_200C_206B_200F_206D_206F_202B_200C_202C_200F_206E_202D_202D_206B_202E_202E_206B_200E_206A_200C_206A_206D_206E_206C_202E_202A_202C_200D_202B_202A_200D_206A_206B_200C_206C_200D_202E_200B_206F_202E(Catalog.GetData<ItemData>(text, true), (Action<Item>)delegate(Item P_0)
	Line  834: 									_200C_202A_200F_206B_200D_202D_200F_200B_206A_206C_200C_200F_206F_206A_206F_206B_206D_206B_202D_202D_206F_206B_206F_202C_200C_202D_206D_202B_200D_202E_200B_206A_202C_206F_206A_202C_206A_202D_206D_202E._200D_206E_206C_200E_206F_206B_206F_200E_206B_200C_200C_202E_202E_202B_202B_200B_206E_202D_202A_206E_206F_202A_202B_206A_206D_202C_202B_202A_206C_206C_206D_206F_206D_206B_200F_202B_200D_206E_206A_206B_202E(_200C_202A_200F_206B_200D_202D_200F_200B_206A_206C_200C_200F_206F_206A_206F_206B_206D_206B_202D_202D_206F_206B_206F_202C_200C_202D_206D_202B_200D_202E_200B_206A_202C_206F_206A_202C_206A_202D_206D_202E._206B_200E_200D_202D_200D_206E_202A_202A_200F_200D_206B_200D_202D_202B_206C_200D_202C_200C_200F_200F_202B_202D_202B_206B_202A_206B_206C_202E_206D_200F_206C_202C_206B_200D_206E_206F_202D_206B_206A_206B_202E((ThunderBehaviour)(object)P_0), val);
	Line  835: 									_200C_202A_200F_206B_200D_202D_200F_200B_206A_206C_200C_200F_206F_206A_206F_206B_206D_206B_202D_202D_206F_206B_206F_202C_200C_202D_206D_202B_200D_202E_200B_206A_202C_206F_206A_202C_206A_202D_206D_202E._206E_206E_200B_206B_200B_206B_206A_206D_202A_202E_200D_200E_202B_206C_200D_206F_206D_206B_206D_206A_202E_206C_202D_206D_200E_202D_202E_202E_202B_206F_202D_200C_202C_202A_202C_202D_200C_206D_202C_202A_202E(_200C_202A_200F_206B_200D_202D_200F_200B_206A_206C_200C_200F_206F_206A_206F_206B_206D_206B_202D_202D_206F_206B_206F_202C_200C_202D_206D_202B_200D_202E_200B_206A_202C_206F_206A_202C_206A_202D_206D_202E._206B_200E_200D_202D_200D_206E_202A_202A_200F_200D_206B_200D_202D_202B_206C_200D_202C_200C_200F_200F_202B_202D_202B_206B_202A_206B_206C_202E_206D_200F_206C_202C_206B_200D_206E_206F_202D_206B_206A_206B_202E((ThunderBehaviour)(object)P_0), val2);
	Line  873: 					list = _202B_200D_206B_202D_206C_206C_206A_206F_202E_206D_202B_206C_202C_206A_202E_202E_200F_200F_200F_200E_206D_206C_202E_200E_202A_206D_200E_202E_202B_206A_200C_206B_200E_202E_200D_202C_202A_200E_202C_206A_202E.Where(delegate(string P_0)
	Line  906: 					if (_206B_206A_200F_202C_202D_200E_206D_200C_206E_202E_202E_206E_206E_202A_200D_202B_200B_202D_200F_202E_200D_202A_202A_206B_202B_202A_206F_202E_202D_206A_202C_206C_202D_200C_206B_206A_202E_206A_206F_202C_202E(lootType, global::_003CModule_003E._200D_206A_200B_202E_202C_202C_200F_206D_202E_206A_206F_200B_202B_202B_200D_206B_200B_206C_206C_200C_200D_200F_202C_200E_200C_200B_200D_202C_202E_206C_206E_202B_200D_202C_206B_200E_200D_202E_200C_202E_202E<string>(-1009065379)))
	Line  926: 					list = _202B_200D_206B_202D_206C_206C_206A_206F_202E_206D_202B_206C_202C_206A_202E_202E_200F_200F_200F_200E_206D_206C_202E_200E_202A_206D_200E_202E_202B_206A_200C_206B_200E_202E_200D_202C_202A_200E_202C_206A_202E.Where([MethodImpl(MethodImplOptions.NoInlining)] (string P_0) =>
	Line  980: 									num8 = (_202A_202C_200F_200B_206B_202A_206F_206C_206D_206C_200C_206B_202C_202A_206A_206E_202C_202A_200C_206A_202B_200E_202E_200F_202A_202C_206D_200E_202A_202D_206D_206A_200B_202E_202E_202A_200F_202B_206D_202E._206B_202C_202D_202D_206A_206F_200D_202B_202B_200E_206D_202C_202D_206C_206F_202B_200E_202A_202D_202C_202A_200F_202A_202B_200E_200D_200C_200B_202E_206E_206D_200D_202B_202D_206B_206F_202B_206F_200C_206C_202E(P_0, global::_003CModule_003E._200D_206A_200B_202E_202C_202C_200F_206D_202E_206A_206F_200B_202B_202B_200D_206B_200B_206C_206C_200C_200D_200F_202C_200E_200C_200B_200D_202C_202E_206C_206E_202B_200D_202C_206B_200E_200D_202E_200C_202E_202E<string>(1940667524)) ? 1 : 0);
	Line 1019: 					list = _202B_200D_206B_202D_206C_206C_206A_206F_202E_206D_202B_206C_202C_206A_202E_202E_200F_200F_200F_200E_206D_206C_202E_200E_202A_206D_200E_202E_202B_206A_200C_206B_200E_202E_200D_202C_202A_200E_202C_206A_202E;
	Line 1023: 					text = list[_202B_200E_206F_202B_202C_202B_206F_206B_200D_206D_202B_202A_200B_202A_206C_206C_206A_206E_202E_200B_202E_206E_206A_202C_206B_202D_202A_202B_206B_200D_200C_202E_200B_200F_202C_202D_206A_202A_200F_202D_202E(0, list.Count)];
	Line 1033: 					if (_206B_206A_200F_202C_202D_200E_206D_200C_206E_202E_202E_206E_206E_202A_200D_202B_200B_202D_200F_202E_200D_202A_202A_206B_202B_202A_206F_202E_202D_206A_202C_206C_202D_200C_206B_206A_202E_206A_206F_202C_202E(lootType, global::_003CModule_003E._200B_200E_206B_206B_206E_200F_202A_206D_200F_200B_202B_200E_202B_206A_206A_202A_200E_206D_202E_200B_202D_206E_206C_206C_202B_206E_200C_202A_202A_206A_200D_206C_202B_206E_206C_206F_200C_206A_206A_200F_202E<string>(-1289078677)))
	Line 1046: 					list = _202B_200D_206B_202D_206C_206C_206A_206F_202E_206D_202B_206C_202C_206A_202E_202E_200F_200F_200F_200E_206D_206C_202E_200E_202A_206D_200E_202E_202B_206A_200C_206B_200E_202E_200D_202C_202A_200E_202C_206A_202E.Where(delegate(string P_0)
	Line 1101: 					if (_206B_206A_200F_202C_202D_200E_206D_200C_206E_202E_202E_206E_206E_202A_200D_202B_200B_202D_200F_202E_200D_202A_202A_206B_202B_202A_206F_202E_202D_206A_202C_206C_202D_200C_206B_206A_202E_206A_206F_202C_202E(lootType, global::_003CModule_003E._200D_206A_200B_202E_202C_202C_200F_206D_202E_206A_206F_200B_202B_202B_200D_206B_200B_206C_206C_200C_200D_200F_202C_200E_200C_200B_200D_202C_202E_206C_206E_202B_200D_202C_206B_200E_200D_202E_200C_202E_202E<string>(-1129728743)))
	Line 1161: 					lootMethod = global::_003CModule_003E._202D_206E_202E_202C_200B_200E_202B_200C_206D_202B_200E_206A_202E_206D_202C_200E_200D_200F_206D_200F_206E_202D_202A_202C_202A_206A_206A_200C_200E_206E_200B_206D_200F_202D_202B_206A_202C_206A_206D_202A_202E<string>(-1394322709);
	Line 1173: 						_200C_202E_200B_200C_202A_202E_202C_202D_202D_206D_200B_200E_202D_206B_202D_202E_206D_202C_200B_206F_206F_200C_206C_206E_206C_202B_206F_206B_206C_200F_206B_202E_202B_206F_202C_206B_206E_206F_200F_206D_202E(global::_003CModule_003E._202E_202E_200D_200B_206E_202E_200B_200F_202A_202E_206C_206C_202C_200E_200C_206F_206B_206E_200F_202D_200B_200D_206A_200E_206B_200C_200E_202C_206F_202E_206A_200C_202B_206A_206B_202E_200F_202C_200E_206B_202E<string>(1120670370), global::_003CModule_003E._202D_206E_202E_202C_200B_200E_202B_200C_206D_202B_200E_206A_202E_206D_202C_200E_200D_200F_206D_200F_206E_202D_202A_202C_202A_206A_206A_200C_200E_206E_200B_206D_200F_202D_202B_206A_202C_206A_206D_202A_202E<string>(-1656401613)),
	Line 1174: 						_200C_202E_200B_200C_202A_202E_202C_202D_202D_206D_200B_200E_202D_206B_202D_202E_206D_202C_200B_206F_206F_200C_206C_206E_206C_202B_206F_206B_206C_200F_206B_202E_202B_206F_202C_206B_206E_206F_200F_206D_202E(global::_003CModule_003E._200B_200E_206B_206B_206E_200F_202A_206D_200F_200B_202B_200E_202B_206A_206A_202A_200E_206D_202E_200B_202D_206E_206C_206C_202B_206E_200C_202A_202A_206A_200D_206C_202B_206E_206C_206F_200C_206A_206A_200F_202E<string>(1590739999), global::_003CModule_003E._202E_202E_200D_200B_206E_202E_200B_200F_202A_202E_206C_206C_202C_200E_200C_206F_206B_206E_200F_202D_200B_200D_206A_200E_206B_200C_200E_202C_206F_202E_206A_200C_202B_206A_206B_202E_200F_202C_200E_206B_202E<string>(1477976958)),
	Line 1175: 						_200C_202E_200B_200C_202A_202E_202C_202D_202D_206D_200B_200E_202D_206B_202D_202E_206D_202C_200B_206F_206F_200C_206C_206E_206C_202B_206F_206B_206C_200F_206B_202E_202B_206F_202C_206B_206E_206F_200F_206D_202E(global::_003CModule_003E._202D_202E_206B_206B_200C_206F_202A_200E_206C_206D_206F_206A_202D_200F_206E_200E_200C_202D_202B_200C_206F_206B_200C_200F_202D_200F_202E_206E_200E_200F_200F_202C_200B_200F_206B_202C_206D_202D_200E_200C_202E<string>(-1406585842), global::_003CModule_003E._200B_200E_206B_206B_206E_200F_202A_206D_200F_200B_202B_200E_202B_206A_206A_202A_200E_206D_202E_200B_202D_206E_206C_206C_202B_206E_200C_202A_202A_206A_200D_206C_202B_206E_206C_206F_200C_206A_206A_200F_202E<string>(1179337331)),
	Line 1176: 						_200C_202E_200B_200C_202A_202E_202C_202D_202D_206D_200B_200E_202D_206B_202D_202E_206D_202C_200B_206F_206F_200C_206C_206E_206C_202B_206F_206B_206C_200F_206B_202E_202B_206F_202C_206B_206E_206F_200F_206D_202E(global::_003CModule_003E._202E_202E_200D_200B_206E_202E_200B_200F_202A_202E_206C_206C_202C_200E_200C_206F_206B_206E_200F_202D_200B_200D_206A_200E_206B_200C_200E_202C_206F_202E_206A_200C_202B_206A_206B_202E_200F_202C_200E_206B_202E<string>(882465978), global::_003CModule_003E._202D_206E_202E_202C_200B_200E_202B_200C_206D_202B_200E_206A_202E_206D_202C_200E_200D_200F_206D_200F_206E_202D_202A_202C_202A_206A_206A_200C_200E_206E_200B_206D_200F_202D_202B_206A_202C_206A_206D_202A_202E<string>(-1394322709))
	Line 1180: 						_200C_202E_200B_200C_202A_202E_202C_202D_202D_206D_200B_200E_202D_206B_202D_202E_206D_202C_200B_206F_206F_200C_206C_206E_206C_202B_206F_206B_206C_200F_206B_202E_202B_206F_202C_206B_206E_206F_200F_206D_202E(global::_003CModule_003E._202D_206E_202E_202C_200B_200E_202B_200C_206D_202B_200E_206A_202E_206D_202C_200E_200D_200F_206D_200F_206E_202D_202A_202C_202A_206A_206A_200C_200E_206E_200B_206D_200F_202D_202B_206A_202C_206A_206D_202A_202E<string>(-1787441065), global::_003CModule_003E._202D_202E_206B_206B_200C_206F_202A_200E_206C_206D_206F_206A_202D_200F_206E_200E_200C_202D_202B_200C_206F_206B_200C_200F_202D_200F_202E_206E_200E_200F_200F_202C_200B_200F_206B_202C_206D_202D_200E_200C_202E<string>(2126818770)),
	Line 1181: 						_200C_202E_200B_200C_202A_202E_202C_202D_202D_206D_200B_200E_202D_206B_202D_202E_206D_202C_200B_206F_206F_200C_206C_206E_206C_202B_206F_206B_206C_200F_206B_202E_202B_206F_202C_206B_206E_206F_200F_206D_202E(global::_003CModule_003E._200D_206A_200B_202E_202C_202C_200F_206D_202E_206A_206F_200B_202B_202B_200D_206B_200B_206C_206C_200C_200D_200F_202C_200E_200C_200B_200D_202C_202E_206C_206E_202B_200D_202C_206B_200E_200D_202E_200C_202E_202E<string>(-526411923), global::_003CModule_003E._202D_206E_202E_202C_200B_200E_202B_200C_206D_202B_200E_206A_202E_206D_202C_200E_200D_200F_206D_200F_206E_202D_202A_202C_202A_206A_206A_200C_200E_206E_200B_206D_200F_202D_202B_206A_202C_206A_206D_202A_202E<string>(-1525362161)),
	Line 1182: 						_200C_202E_200B_200C_202A_202E_202C_202D_202D_206D_200B_200E_202D_206B_202D_202E_206D_202C_200B_206F_206F_200C_206C_206E_206C_202B_206F_206B_206C_200F_206B_202E_202B_206F_202C_206B_206E_206F_200F_206D_202E(global::_003CModule_003E._200D_206A_200B_202E_202C_202C_200F_206D_202E_206A_206F_200B_202B_202B_200D_206B_200B_206C_206C_200C_200D_200F_202C_200E_200C_200B_200D_202C_202E_206C_206E_202B_200D_202C_206B_200E_200D_202E_200C_202E_202E<string>(-647075287), global::_003CModule_003E._202D_206E_202E_202C_200B_200E_202B_200C_206D_202B_200E_206A_202E_206D_202C_200E_200D_200F_206D_200F_206E_202D_202A_202C_202A_206A_206A_200C_200E_206E_200B_206D_200F_202D_202B_206A_202C_206A_206D_202A_202E<string>(-1394322709))
	Line 1191: 	static string _206B_200B_206C_200E_200D_202D_200B_206A_200B_202A_200D_200E_202E_200E_206D_200F_202E_202A_202C_202E_206A_200E_202A_206F_206E_202A_200B_202C_202A_202D_202B_202C_202E_200F_206E_200F_200D_206F_206E_206F_202E(string P_0, string P_1)
	Line 1196: 	static ModOptionFloat _206D_206A_206F_200B_202E_206D_202E_200D_206F_206C_200C_200C_200E_206C_200D_200B_200B_200E_206A_206D_206F_200C_206B_206A_206D_206D_200D_206B_206D_206E_200D_206C_206A_202A_202E_206E_206B_202B_200E_202E_202E(string P_0, float P_1)
	Line 1203: 	static void _200F_206E_206F_200B_206F_200D_202D_202A_200D_202B_202D_206B_206D_206A_200E_202E_202E_200E_206A_200E_202E_200B_206A_200C_200C_202A_200D_202E_206D_200F_202A_206E_206A_200F_206E_200B_200B_202B_206D_200C_202E(object P_0)
	Line 1208: 	static void _202C_200F_206B_202D_206F_202E_206F_206B_206D_200E_202E_200F_202E_200F_206A_200E_202E_202C_200E_202C_206A_202E_202B_202B_202C_206E_202C_202B_202B_206F_202A_202A_202A_206E_202C_202C_206A_206E_202C_206C_202E(ModLoadEvent P_0)
	Line 1213: 	static void _206C_202D_206B_202B_202B_206A_202B_200E_200E_200F_206B_200D_202E_202E_202A_202C_206B_202D_206D_206A_202B_200C_202D_200D_202E_200B_200F_200E_202C_202C_206C_200F_206B_200F_206F_200D_200D_206B_206D_206D_202E(BreakStartDelegate P_0)
	Line 1218: 	static void _200F_206D_206B_202B_200E_200B_202A_200C_202E_206C_206E_206C_200E_200D_206F_202E_206E_200B_206F_206C_200E_200D_200E_202E_200D_202D_200D_202C_202B_202A_202E_202B_206D_202D_202A_206B_200B_202B_202C_202E(BreakStartDelegate P_0)
	Line 1223: 	static void _206D_200E_206B_206D_206A_202D_206B_200E_200F_200F_200E_200B_200D_206D_206E_202D_206D_200F_200B_206E_200D_202D_206B_206C_202B_202B_206E_200C_202E_202D_206E_206B_206E_200E_206D_200F_200F_200C_206C_200C_202E(CreatureKillEvent P_0)
	Line 1228: 	static void _202C_200E_202A_200E_200E_206E_202E_202C_202E_200C_202A_200B_200E_206C_206D_200D_206D_206C_206C_200B_206F_200B_202A_206B_200D_202E_200D_202D_206C_202A_206D_206D_200C_202E_202E_206A_202A_202E_206E_206E_202E(CreatureKillEvent P_0)
	Line 1233: 	void _206D_202D_206C_200D_206B_200E_206D_206F_202A_202B_200D_202E_202C_202E_206C_206C_202B_202E_200D_206F_200B_200F_200B_200F_200D_206F_202B_200B_202C_200E_202D_200E_200C_202E_200C_200F_202D_206C_206D_202A_202E(ModData P_0)
	Line 1238: 	static int _202B_200E_206F_202B_202C_202B_206F_206B_200D_206D_202B_202A_200B_202A_206C_206C_206A_206E_202E_200B_202E_206E_206A_202C_206B_202D_202A_202B_206B_200D_200C_202E_200B_200F_202C_202D_206A_202A_200F_202D_202E(int P_0, int P_1)
	Line 1243: 	static bool _206B_206A_200F_202C_202D_200E_206D_200C_206E_202E_202E_206E_206E_202A_200D_202B_200B_202D_200F_202E_200D_202A_202A_206B_202B_202A_206F_202E_202D_206A_202C_206C_202D_200C_206B_206A_202E_206A_206F_202C_202E(string P_0, string P_1)
	Line 1248: 	static Transform _200C_202D_206E_202B_200E_202A_206A_202A_200F_202A_202D_202B_206E_206A_206A_200D_200B_202B_202A_200E_202D_206E_200C_200C_206F_200E_206A_200B_206B_200E_206A_206C_206F_200C_206F_206E_206A_206B_200E_202E(ThunderBehaviour P_0)
	Line 1253: 	static Vector3 _206A_202C_202A_206C_202B_202C_200D_202E_202B_202D_200C_200D_202E_206D_206F_206B_206D_206D_200D_206B_202C_202A_202E_206F_206F_202D_200E_206A_202A_206F_200C_202E_202B_206B_200B_206D_200F_200B_200E_206C_202E(Transform P_0)
	Line 1259: 	static List<string> _206A_200F_200D_200F_206F_206E_200E_206C_202A_202B_206B_206D_200B_200D_202C_202A_202A_202A_200F_206E_206B_206A_206A_200B_200E_200F_206C_206A_206B_202B_206F_202E_200F_206B_202D_202C_206D_202C_200C_200D_202E(Category P_0)
	Line 1265: 	static RagdollPart _206A_202C_200F_202E_200C_206D_206F_202E_206A_200E_202C_206E_202E_206C_202C_200B_206C_200E_206A_200C_200B_202C_206E_206E_200B_206E_206E_202D_200F_200F_206D_200F_200D_200B_206A_200F_200C_200E_202C_200F_202E(Ragdoll P_0, Type P_1)
	Line 1271: 	static bool _200D_200C_206F_206D_200E_206B_206B_202C_206E_206F_200D_200C_202E_206B_206F_200F_202D_206A_206F_202E_206B_206F_200D_206F_202C_202B_206C_200E_202A_206C_202E_206C_206F_202E_202E_206B_200D_200C_200C_202C_202E(Object P_0, Object P_1)
	Line 1276: 	static void _206E_202E_206B_202E_202C_202D_202E_202D_206C_202E_200F_200C_200D_202C_200F_202C_206C_206B_200C_206E_206E_202C_200E_200E_202D_202C_206F_200E_206F_206A_206F_200F_206F_206F_206B_202D_202D_200E_206A_202B_202E(ThunderEntity P_0)
	Line 1281: 	static void _200E_200F_200C_206B_200F_206D_206F_202B_200C_202C_200F_206E_202D_202D_206B_202E_202E_206B_200E_206A_200C_206A_206D_206E_206C_202E_202A_202C_200D_202B_202A_200D_206A_206B_200C_206C_200D_202E_200B_206F_202E(ItemData P_0, Action<Item> P_1, Vector3? P_2, Quaternion? P_3, Transform P_4, bool P_5, List<ContentCustomData> P_6, Owner P_7)
	Line 1287: 	static ModOptionString _200C_202E_200B_200C_202A_202E_202C_202D_202D_206D_200B_200E_202D_206B_202D_202E_206D_202C_200B_206F_206F_200C_206C_206E_206C_202B_206F_206B_206C_200F_206B_202E_202B_206F_202C_206B_206E_206F_200F_206D_202E(string P_0, string P_1)
";
                #endregion

                // get report of values of A-Z, a-z, 0-9
                byte[] A = Encoding.ASCII.GetBytes("A");
                byte[] Z = Encoding.ASCII.GetBytes("Z");
                byte[] a = Encoding.ASCII.GetBytes("a");
                byte[] z = Encoding.ASCII.GetBytes("z");
                byte[] _0 = Encoding.ASCII.GetBytes("0");
                byte[] _9 = Encoding.ASCII.GetBytes("9");

                // A-Z: 65-90, a-z: 97-122, 0-9: 48-57
                string report_alphanum = $"A-Z: {A[0]}-{Z[0]}, a-z: {a[0]}-{z[0]}, 0-9: {_0[0]}-{_9[0]}";

                // get report of the right hex's values
                var code_counts = new Dictionary<byte, int>();
                var value_counts = new Dictionary<string, int>();

                foreach (Match match in Regex.Matches(values, @"_(?<left>[A-F0-9]{2})(?<right>[A-F0-9]{2})"))
                {
                    byte[] byte_match = Convert.FromHexString(match.Groups["right"].Value);

                    if (code_counts.ContainsKey(byte_match[^1]))
                        code_counts[byte_match[^1]]++;
                    else
                        code_counts.Add(byte_match[^1], 1);


                    string val = match.Groups["left"].Value + match.Groups["right"].Value;

                    if (value_counts.ContainsKey(val))
                        value_counts[val]++;
                    else
                        value_counts.Add(val, 1);
                }

                // see if the hex values need an offset to fit in the alphanumeric set
                var by_byte = string.Join(Environment.NewLine, code_counts.Keys.
                    OrderBy(o => o).
                    Select(o => $"{o}\t{code_counts[o]}"));

                var by_count = string.Join(Environment.NewLine, code_counts.Keys.
                    Select(o => new
                    {
                        key = o,
                        count = code_counts[o],
                    }).
                    OrderByDescending(o => o.count).
                    Select(o => $"{o.key}\t{o.count}"));

                var distinct_values = string.Join(Environment.NewLine, value_counts.Keys.Distinct().OrderBy(o => o));

                var values_count = string.Join(Environment.NewLine, value_counts.Keys.
                    OrderBy(o => o).
                    Select(o => $"{o}\t{value_counts[o]}"));

                // results... there are the two odd values and then 16 values evenly spread.  all sources seem to have 41 of these sets
                // that start with 20.  so they don't appear to be english words and instead are keys into some dictionary used during
                // decompile
                /*

                A-Z: 65-90, a-z: 97-122, 0-9: 48-57




                003C	29
                003E	29		this is always _003E9 and always together: _003C_003E9

                200B	272
                200C	296
                200D	311
                200E	352
                200F	306

                202A	329
                202B	335
                202C	357
                202D	336
                202E	545

                206A	362
                206B	356
                206C	279
                206D	297
                206E	265
                206F	313




                11	272
                12	296
                13	311
                14	352
                15	306

                42	329
                43	335
                44	357
                45	336
                46	545

                60	29		ignore 60, 62, they are from values that start with 00 instead of 20
                62	29

                106	362
                107	356
                108	279
                109	297
                110	265
                111	313

                */

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), Title, MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        #endregion

        #region Private Methods

        private static (string filename, bool extra_folder)[] GetDLLNames(string source_folder)
        {
            // Find all dlls, group by containing folder
            var dlls_by_folder = Directory.EnumerateFiles(source_folder, "*.dll", SearchOption.AllDirectories).
                Select(o => new
                {
                    filename = o,
                    folder = System.IO.Path.GetDirectoryName(o),
                }).
                ToLookup(o => o.folder);

            // Return all dll filenames and which need an extra subfolder
            var retVal = new List<(string, bool)>();

            foreach (var folder in dlls_by_folder)
            {
                var contained_dlls = folder.ToArray();

                foreach (var dll in contained_dlls)
                    retVal.Add((dll.filename, contained_dlls.Length > 1));      // only add an extra subfolder if there are multiple dlls in this parent folder (so that each subfolder gets its own project)
            }

            return retVal.ToArray();
        }

        private static string GetOutputProjectFolder(string dll_filename, string source_folder, string output_folder, bool create_extra_subfolder)
        {
            // Get the subfolders source_folder that the dll file sits in
            string input_folder = System.IO.Path.GetDirectoryName(dll_filename);

            // Figure out the folders between the one the dll is in and the root source_folder
            string folder_diff = System.IO.Path.GetRelativePath(source_folder, input_folder);

            // Add the dll's name, but with an underscore (only when there are multiple dlls in the same folder)
            if (create_extra_subfolder)
            {
                string extra = System.IO.Path.GetFileName(dll_filename);
                extra = Regex.Replace(extra, @"\.dll$", "_dll", RegexOptions.IgnoreCase);
                folder_diff = System.IO.Path.Combine(folder_diff, extra);
            }

            string retVal = System.IO.Path.Combine(output_folder, folder_diff);

            // Throw a guid at the end if that folder already exists (should never happen)
            if (Directory.Exists(retVal))
                retVal += "_" + Guid.NewGuid().ToString();

            return retVal;
        }

        private static void RemoveILSpyErrorMsgs(string folder)
        {
            // Example comment that this function removes:
            //IL_0049: Unknown result type (might be due to invalid IL or missing references)

            foreach (string filename in Directory.EnumerateFiles(folder, "*.cs", SearchOption.AllDirectories))
            {
                StringBuilder sb = new StringBuilder();

                bool skipped = false;

                using (StreamReader reader = new StreamReader(filename))
                {
                    string line;
                    while ((line = reader.ReadLine()) != null)
                    {
                        if (Regex.IsMatch(line, @"^\s*//IL_[0-9a-z]{4}:\s+.+$", RegexOptions.IgnoreCase))
                            skipped = true;
                        else
                            sb.AppendLine(line);
                    }
                }

                if (skipped)        // only overwrite if there was a change
                    File.WriteAllText(filename, sb.ToString());
            }
        }

        #endregion
    }
}
